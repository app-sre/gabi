apiVersion: v1
kind: Template
metadata:
  name: ${GABI_INSTANCE}
objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: ${GABI_INSTANCE}
    annotations:
      serviceaccounts.openshift.io/oauth-redirectreference.gabi: '{"kind":"OAuthRedirectReference","apiVersion":"v1","reference":{"kind":"Route","name":"${GABI_INSTANCE}"}}'
  imagePullSecrets:
  - name: ${IMAGE_PULL_SECRET}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: ${GABI_INSTANCE}
    name: ${GABI_INSTANCE}
    annotations:
      ignore-check.kube-linter.io/minimum-three-replicas: "GABI does not need 3 replicas"
      ignore-check.kube-linter.io/unset-cpu-requirements: "no cpu limits"
  spec:
    replicas: ${{REPLICAS}}
    selector:
      matchLabels:
        app: ${GABI_INSTANCE}
    template:
      metadata:
        labels:
          app: ${GABI_INSTANCE}
      spec:
        serviceAccountName: ${GABI_INSTANCE}
        containers:
        - name: oauth-proxy
          image: ${OAUTH_PROXY_IMAGE_NAME}:${OAUTH_PROXY_IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 3000
            name: http
            protocol: TCP
          readinessProbe:
            httpGet:
              path: /oauth/healthz
              port: http
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /oauth/healthz
              port: http
              scheme: HTTPS
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          resources: "${{OAUTH_PROXY_RESOURCES}}"
          args:
          - --https-address=:3000
          - --provider=openshift
          - --openshift-service-account=${GABI_INSTANCE}
          - --upstream=http://localhost:8080
          - --upstream-timeout=${OAUTH_PROXY_UPSTREAM_TIMEOUT}
          - '--openshift-delegate-urls={"/": {"resource": "namespaces", "verb": "get", "name": "${NAMESPACE}", "namespace": "${NAMESPACE}"}}'
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret-file=/var/run/secrets/kubernetes.io/serviceaccount/token
          volumeMounts:
          - mountPath: /etc/tls/private
            name: gabi-tls
        - image: quay.io/app-sre/gabi:${IMAGE_TAG}
          name: ${GABI_INSTANCE}
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
          - name: gabi-config
            mountPath: /config
          env:
          - name: HOST
            value: ${HOST}
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: ENVIRONMENT
            value: ${ENVIRONMENT}
          - name: NAMESPACE
            value: ${NAMESPACE}
          - name: SPLUNK_INDEX
            value: ${SPLUNK_INDEX}
          - name: SPLUNK_TOKEN
            valueFrom:
              secretKeyRef:
                key: SPLUNK_TOKEN
                name: ${GABI_INSTANCE}-splunk
          - name: SPLUNK_ENDPOINT
            valueFrom:
              secretKeyRef:
                key: SPLUNK_ENDPOINT
                name: ${GABI_INSTANCE}-splunk
          - name: DB_DRIVER
            value: ${DB_DRIVER}
          - name: DB_WRITE
            value: ${DB_WRITE}
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: db.host
                name: ${AWS_RDS_SECRET_NAME}
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                key: db.port
                name: ${AWS_RDS_SECRET_NAME}
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: db.user
                name: ${AWS_RDS_SECRET_NAME}
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: db.password
                name: ${AWS_RDS_SECRET_NAME}
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                key: db.name
                name: ${AWS_RDS_SECRET_NAME}
          - name: CONFIG_FILE_PATH
            value: ${CONFIG_FILE_PATH}
          - name: REQUEST_TIMEOUT
            value: ${REQUEST_TIMEOUT}
          resources: "${{RESOURCES}}"
        volumes:
        - name: gabi-tls
          secret:
            secretName: ${GABI_INSTANCE}-svc-tls
        - name: gabi-config
          configMap:
            optional: true
            name: ${GABI_INSTANCE}
- apiVersion: v1
  kind: Secret
  metadata:
    name: ${GABI_INSTANCE}-splunk
  type: Opaque
  stringData:
    SPLUNK_TOKEN: ${SPLUNK_TOKEN}
    SPLUNK_ENDPOINT: ${SPLUNK_ENDPOINT}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${GABI_INSTANCE}-internal
  spec:
    clusterIP: None
    ports:
    - name: http
      port: 8080
      protocol: TCP
    selector:
      app: ${GABI_INSTANCE}
- apiVersion: v1
  kind: Service
  metadata:
    name: ${GABI_INSTANCE}-external
    annotations:
      service.alpha.openshift.io/serving-cert-secret-name: ${GABI_INSTANCE}-svc-tls
  spec:
    ports:
    - name: http
      port: 3000
      protocol: TCP
      targetPort: http
    selector:
      app: ${GABI_INSTANCE}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations: "${{ROUTE_ANNOTATIONS}}"
    name: ${GABI_INSTANCE}
  spec:
    host: ${HOST}
    port:
      targetPort: http
    to:
      kind: Service
      name: ${GABI_INSTANCE}-external
      weight: 100
    tls:
      termination: reencrypt
      insecureEdgeTerminationPolicy: Redirect
parameters:
- name: ENVIRONMENT
  value: development
- name: NAMESPACE
  value: gabi
- name: IMAGE_TAG
  value: latest
- name: REPLICAS
  value: "1"
- name: RESOURCES
  value: '{"requests": {"memory": "128Mi", "cpu": "100m"}, "limits":{"memory": "256Mi"}}'
- name: OAUTH_PROXY_IMAGE_NAME
  value: registry.redhat.io/openshift4/ose-oauth-proxy-rhel9
- name: OAUTH_PROXY_IMAGE_TAG
  value: "v4.18.0-202506230505.p0.gcbd44ad.assembly.stream.el9"
- name: OAUTH_PROXY_UPSTREAM_TIMEOUT
  value: "300s"
- name: OAUTH_PROXY_RESOURCES
  value: '{"requests": {"memory": "32Mi", "cpu": "100m"}, "limits":{"memory": "64Mi"}}'
- name: DB_DRIVER
  value: pgx
- name: DB_WRITE
  value: "false"
- name: AWS_RDS_SECRET_NAME
  value: db-creds
- name: HOST
  value: example.com
- name: POD_NAME
  value: gabi-staging
- name: SPLUNK_INDEX
  value: app-sre
- name: SPLUNK_TOKEN
  required: true
- name: SPLUNK_ENDPOINT
  required: true
- name: CONFIG_FILE_PATH
  value: /config/config.json
- name: REQUEST_TIMEOUT
  value: "30s"
- name: GABI_INSTANCE
  value: gabi-instance
- name: ROUTE_ANNOTATIONS
  value: '{"haproxy.router.openshift.io/timeout": "600s"}'
- name: IMAGE_PULL_SECRET
  value: ""
